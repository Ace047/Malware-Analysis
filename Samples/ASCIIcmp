; Demo - checking format of a string
; correct format is "####ccc", where # is number char 0..9 and c is lower case character a..z
; e.g 123fog or 555tim
; Joe Norton October 2021
%include "/home/malware/Desktop/Malware-Analysis/joey_lib_io_v7_release.asm"

global main

section .data
    str_enter_string db "Please enter a string. Empty string to finish.", 10, 0
    str_ok db "The string is OK.", 10, 0
    str_not_ok db "The string is not of the correct format.", 10, 0
    str_goodbye db "Goodbye!", 10, 0
    
section .bss
    buff: resb 100 ; this is an uninitiaised buffer big enough for a string of 99 chars (plus a NULL)

section .text

main:
    mov rbp, rsp; for correct debugging
    push rbp    ; this is just
    mov rbp, rsp; setting up the
    sub rsp, 32 ; stack frame
    
    ;First we are going to enter strings into the buffer until empty string is entered
    mov rbx, buff ; we will use rbx as our pointer into the buffer
  .main_loop:
    ;print message
    mov rdi, str_enter_string
    call print_string_new
    ;read a new string from command line
    call read_string_new ; pointer to new string in rax
    ;copy the new string into buffer (buff)
    mov rsi, rax ; address of source string to copy - in rsi
    mov rdi, rbx ; address of destination (buff) to copy - in rdi
    call copy_string ; copy our new string into buff
    mov al, BYTE [buff] ; move the first byte of the current string into al
    cmp al, 0 ; finish if the string was empty (i.e. the first byte was NULL)
    je .finish

    mov rax, QWORD [rbx] ; move the first 8 bytes of the string buffer onto the RAX register
    mov rcx, 4 ; this is our counter to count four loops for the number chars
  .loop1:    
    cmp al, '0'
    jl .string_not_ok
    cmp al, '9'
    jg .string_not_ok
    shr rax, 8 ; move the next byte into al
    dec rcx ; decrement the counter varible
    cmp rcx, 0 ; check the counter variable
    jne .loop1 ; loop if not zero
    mov rcx, 3 ; this is our counter to count three loops for alpha chars
  .loop2:
    cmp al, 'a'
    jl .string_not_ok
    cmp al, 'z'
    jg .string_not_ok
    shr rax, 8 ; move the next byte into al
    dec rcx ; decrement the counter varible
    cmp rcx, 0 ; check the counter variable
    jne .loop2 ; loop if not zero
    cmp al, 0 ; test for null terminator (otherwise string is wrong length)
    jne .string_not_ok
  ;if we get here then string is ok
    mov rdi, str_ok
    call print_string_new
    jmp .main_loop

  .string_not_ok:
    mov rdi, str_not_ok
    call print_string_new
    jmp .main_loop
  
  .finish:
    mov rdi, str_goodbye
    call print_string_new

    add rsp, 32 ; undoing the
    pop rbp     ; stack frame
    
    ret 