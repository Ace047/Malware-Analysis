; Test programme for assembler arrays

%include "/home/malware/asm/joey_lib_io_v6_release.asm"

global main

section .data
	
	echo_welcome: db	"Hello, this is a student ID storage programme",0
	echo_instruction: db "Please enter a student ID: ",0
	echo_message: db "A valid ID is :",0
	echo_bye:	db	"Goodbye!",0
	counter:		dq	0         ; a loop counter
	characters:	times 90 db 0      ; an array big enough for 10 student IDs (8 chars + null).
                                            ; note that this memory is initialkised to zero
									
section .text
	
	; This is our procedure for reading the IDs
	populate:
		lea rbx, [characters]
		mov QWORD  [counter],  0
		.loop: ; notice that we are using local labels within the function
                        mov rdi, QWORD echo_instruction
                        call print_string_new
                        call print_nl_new
                        call read_string_new
                        ; We can't move a memory address to another memory address
                        ; using mov so we use rcx to store the address
                        mov rcx,[rax] ; we're copying the whole string into the rcx register (not a pointer)
                        mov [rbx], rcx
                        add rbx,9
                        add QWORD [counter],9 ; the size of a student ID + NULL
                        cmp QWORD [counter], 27 ; this will loop three times
                        jne .loop
		ret
		
; This prints them out
	display:
		.loop: ; notice that we are using local labels within the function
			mov rdi, QWORD echo_message
			call print_string_new
			; set rdi to be the start of the buffer
			mov rdi,  characters
			; and add the number of bytes to get to the current
			; record
			add rdi, rbx

                        call print_string_new
			call print_nl_new
			add rbx,9
			cmp rbx, 27 ; loop three times
			jne .loop
		ret
	

	main:
		push rbp
		mov rbp, rsp
		sub rsp,32
		
		mov rdi, QWORD echo_welcome
		call print_string_new
		call print_nl_new
		
		call populate
		sub rbx,rbx
		call display
		
                mov rdi, QWORD echo_bye
		call print_string_new
		call print_nl_new
		
		add rsp, 32
		pop rbp
		
		ret