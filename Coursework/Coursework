; Coursework assembly program
%include "/home/malware/asm/joey_lib_io_v6_release.asm"
global main
section .data
    menu_str db 10, \
                        "Main Menu", 10, \
                        "1. Add user", 10, \
                        "2. Remove user", 10, \
                        "3. Add computer", 10, \
                        "4. Remove computer", 10, \
                        "5. List all users", 10, \
                        "6. List all computers", 10,\
                        "7. Exit", 10,\
                        "Please enter an option 1-7: ", 10,0
                         
    str_forename db "Enter user forename: ", 10, 0
    str_surname db "Enter user surname: ", 10, 0
    str_age db "Enter user age: ", 10, 0
    str_id db "Enter user id: ", 10, 0
    str_email db "Enter user email: ", 10, 0
    str_comp_name db "Enter computer name: ", 10, 0
    str_comp_ip db "Enter computer ID: ", 10, 0
    str_comp_os db "Enter computer OS: ", 10, 0
    str_user_id db "Enter the user id: ", 10, 0
    str_DOP db "Enter date of purchase; ", 10 ,0
    
    str_option_num db "Option selected: ", 0
    str_wrong_option db "No such option, please try again! ", 10, 0
    str_exit db "You have exited the program!", 10, 0

    user_size equ 193 ;The total information size of an user ;
    max_users equ 100 ;Maximum users permited to add
    size_users_array equ user_size*max_users;
    current_users_num dq 0
    
    
section .bss
    users: resb size_users_array
    
   
section .text
add_user:
    push rbx
    push rcx
    push rdx
    push rdi
    push rsi
    
    mov rcx, users;setting the base address for the users array
    mov rax, QWORD[current_users_num] ; moving the current users number to rax
    mov rbx, user_size; moving 193 to rbx
    mul rbx ; Multiplies the current users number with the user size and calculates the offset of the next unused address
    add rcx, rax; adds the number of existing users to the users array to check what address is free next
    
    ;get forename
    mov rdi, str_forename ;moves the forename into rdi for printing out
    call print_string_new ;Prints the forename string
    call print_nl_new;prints new line
    call read_string_new;reads input and stores in rax
    mov rsi, rax;adds the address of the string to rsi
    mov rdi, rcx; add the memory address to the rdi
    call copy_string;copies the string from input to the user array
    
    ;get surname
    add rcx, 64 ;adds 64 to the rcx reserved by the forename string
    mov rdi, str_surname
    call print-string_new
    call print_nl_new
    call read_string_new
    mov rsi, rax
    mov rdi, rcx
    call copy_string ;
    
    
    pop 
    
    
    
    
    
    
                        
display_menu:
    push rdi
    mov rdi, menu_str
    call print_string_new
    pop rdi
    ret
                                                
main:
    mov rbp, rsp; for correct debugging
    ; We have these three lines for compatability only
    push rbp
    mov rbp, rsp
    sub rsp,32
    

    
    .menu_loop:
        call display_menu
        call read_int_new
        mov rdx, rax
        cmp rdx, 7; Compares RDX to 7
        je exit ;Exits if it is equal 7
        mov rdi, str_wrong_option
        call print_string_new
        jmp .menu_loop
        
exit:
    
    xor rax,rax ;return 0
    ;compatibility lines
    add rsp, 32
    pop rbp
    ;end of lines
    ret